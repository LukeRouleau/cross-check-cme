import { json, error as kitError } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import type { Database } from '$lib/database.types';

type CaseInsert = Database['public']['Tables']['cases']['Insert'];

export const POST: RequestHandler = async ({
	locals: { supabase, safeGetSession },
}) => {
	const { session } = await safeGetSession();

	if (!session || !session.user) {
		throw kitError(401, 'Unauthorized: User not logged in');
	}

	// Optional: Check admin availability again on the server-side if crucial
	// This adds a bit of safety but might be redundant if the UI already prevents this.
	const { data: adminSettings, error: adminSettingsError } = await supabase
		.from('admin_settings')
		.select('is_available')
		.eq('singleton_id', true)
		.maybeSingle();

	if (adminSettingsError) {
		console.error('Error checking admin availability:', adminSettingsError);
		throw kitError(500, 'Server error checking admin availability.');
	}

	if (!adminSettings?.is_available) {
		throw kitError(403, 'Admin is currently unavailable for new cases.');
	}

	const newCaseData: CaseInsert = {
		user_id: session.user.id,
		status: 'draft', // Default status for a new case
		// created_at and id will be auto-generated by Supabase
		// other fields like custom_instructions, etc., will be null by default or set later
	};

	const { data: createdCase, error: createCaseError } = await supabase
		.from('cases')
		.insert(newCaseData)
		.select()
		.single(); // Expecting a single record to be created and returned

	if (createCaseError) {
		console.error('Error creating new case:', createCaseError);
		throw kitError(500, 'Failed to create new case in the database.');
	}

	return json(createdCase, { status: 201 }); // HTTP 201 Created
};
